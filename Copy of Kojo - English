//scala script to generate book body from source
import scaboo.model._
import scaboo.latexgen
import scaboo.ioutils

println("\n\n*** scaboo: Scala Book Generator: Generating kojobook ***")
ioutils.mkdir("kojobook/tex")

val taskHead = Section("Challenge:", color="BrickRed")
val hintHead = Section("Tip:", color="OliveGreen")
  //more latex colors here: http://en.wikibooks.org/wiki/LaTeX/Colors  
val kojoDownloadUrl = HRef(url="http://www.kogics.net/kojo-download",text="www.kogics.net/kojo-download")
val lthProgrammeraUrl = HRef(url="http://lth.se/programmera",text="lth.se/programmera")
val kojoUrl = HRef(url="http://www.kogics.net/kojo",text="www.kogics.net/kojo")
  
val chapters = Seq(
  Chapter(id="about-kojo", head="About Kojo", template=TextWithImage("kojo.png",14), 
    contents=Seq(
      Section("What is Kojo?",color="black"),
      Para("Kojo is an app that can help you learn how to program. With Kojo you can code using the modern and powerful programming language {!Scala!}. Kojo is free and available for Linux, Windows and Mac OSX."),
      Section("Where can I find Kojo?",color="black"),
      Para("Download Kojo here: "), LineBreak, kojoDownloadUrl, LineBreak,
      Para("Read more here: "), LineBreak, kojoUrl
    )
  ), 
//------------------------------------------------------   
  Chapter(id="forward", head="Your first program", template=TextWithImage("fram.png",14), 
    contents=Seq(
      taskHead, Para("Write the following in the Kojo script editor window:"),
      Code("""
clear
forward
       """.trim, size=30),
      Para("Press the green play button "), Image("play.png",1), LineBreak,
      Para("to run your program."), LineBreak, VSkip(5)
    )
  ), 
//------------------------------------------------------   
  Chapter(id="square", head="Draw a square", template=TextWithImage("square.png"), 
    contents=Seq(
      Code("""
clear
forward
right
       """.trim, size=30),
    Para("If you write {:left:} or {:right:} the turtle will change direction."),
    taskHead, Para("Extend the program so that it makes a square.")
    )
  ),
  Chapter(id="stairs", head="Draw stairs", template=TextWithImage("stairs.png"), 
    contents=Seq(
      Code("""
clear
forward; left
forward; right

       """.trim, size=30), VSkip(1), 
    Para("With semicolon {:;:} between the commands, you could have several commands on the same line."),
    taskHead, Para("Extend the program so that it makes stairs.")
    )
  ), 
//------------------------------------------------------
  Chapter(id="square-repeat", head="Make a loop", template=TextWithImage("square.png"), 
    contents=Seq(
      Code("""
clear
repeat(4){ forward; right }
       """.trim, size=30),
      taskHead, Itemize("What will happen if you change 4 to 100?","Draw stairs with 100 steps.") 
    )
  ), 
//------------------------------------------------------
  Chapter(id="alien", head="Draw a character", template=MultiColumn(2), 
    contents=Seq(
      taskHead, Para("Draw a character of your choice."),
      hintHead, 
      Code("""
hop
left(180)
forward(300)
hop(100)
jumpTo(25,-28)
write("FELIX is awesome")
setPenColor(purple)
setFillColor(green)
       """.trim, size=20),
      Para("You can see the turtle's position down to the left while moving the mouse in the Drawing Window:"), Image("mousepos.png", 6),
      ColumnBreak,
      CenterImage("man.png",4.5), VSkip(2), CenterImage("alien.png",9)
    )
  ), 
//------------------------------------------------------
  Chapter(id="check-speed", head="How fast is your computer?", 
    //template=MultiColumn(2),
    contents=Seq(
      Para( "The first electronic computer was called {*ENIAC*} and could count up to 5000 in a second.",
        "In Kojo there is a function {:räknaTill:} that measures how fast the computer counts.",
        "When I run {:räknaTill(5000):} on my fast computer, the following appears in the output window:"),
      Code("""
*** Räknar från 1 till ... 5000 *** KLAR!
Det tog 0.32 millisekunder.
      """),
      taskHead, 
      Itemize("Run {:räknaTill(5000):} and check if your computer is faster than mine.",
              "How long does it take for your computer to count up to a million?",
              "How much can your computer count to in a second?")      
    )
  ), 
//------------------------------------------------------
  Chapter(id="trace", head="Track the program", template=TextWithImage("trace.png"), 
    contents=Seq(
      taskHead, Itemize(
        "Write a program that draws stairs.",
        "Press the orange play button.",
        "Press on one of the commands: {:CALL fram:}. What happens in the Drawing Window?",
        "When a part of the program is marked in blue, only that part will run when you press the play button. You can unmark the code if you click next to the code that is marked. ",
        "Add more commands to your program and observe what happens when you track it.",
        "Close the window {/Program tracker/} when you're done.")
    )
  ), 
//------------------------------------------------------
  Chapter(id="def-square", head="Write your own function with {:def:}", 
    contents=Seq(
      Para("With {:def:} you can write your own {/functions/} and choose their names."), 
      Code("""
def square =  repeat(4){ forward; right }  

clear
square    //use your square-function
hop
square   
       """.trim, size=20),
    taskHead, Itemize("Change the color of the squares.", "Make several squares."),
    hintHead, Code("""
setFillColor(green); setPenColor(purple)
       """.trim)
    )
  ), 
//------------------------------------------------------
  Chapter(id="square-column", head="Stack squares", 
    template=TextWithImage("square-column.png"),
    contents=Seq(
    taskHead, Para("Make a stack of 10 squares."),
    hintHead, VSkip(1),
    Code("""
def square =  repeat(4){ forward; right }  

clear; setAnimationDelay(100)
repeat(10){ ??? }""".trim)
    )
  ), 
//------------------------------------------------------
  Chapter(id="def-square-column", head="Make a stack-function", 
    template=TextWithImage("square-column.png"),
    contents=Seq(
      taskHead, Para("Make a function called {:stack:}, that draws a stack of 10 squares."),
      hintHead,  
      Code("""
def square = repeat(4){ forward; right }  
def stack = ???

clear; setAnimationDelay(100)
stack""".trim)
    )
  ), 
//------------------------------------------------------
  Chapter(id="square-grid", head="Make a grid", 
    template=TextWithImage("square-grid.png"),
    contents=Seq(
      taskHead, Para("Make a grid of 10*10 squares."),
      hintHead, Itemize("Use your stack-function that you created earlier.",
      "You can jump backwards a whole column with {:hoppa(-10 * 25):}",
      "You can then jump to the right position with {:right; hoppa; left:}") 
    )
  ), 
//------------------------------------------------------
  Chapter(id="def-square-param", head="square med parameter", 
    template=MultiColumn(2),
    contents=Seq(
      taskHead, Para("Draw squares in different sizes."),
      hintHead, 
      Para("Give your function a {/parameter/},","called {:sideLength:} of the type {:Int:}:"), 
      Code("""
def square(sideLenght : Int) = 
  repeat(4){ forward(sideLength); right }

clear; setAnimationDelay(100); invisible
square(100) 
square(70)
square(40)
       """.trim,size=16), 
      Para("You can change the color with:","{:setFillColor(blue); setPenColor(pink):}"),
      ColumnBreak,
      CenterImage("square-param.png",5),
      CenterImage("square-param-color.png",5)
    )
  ), 
//------------------------------------------------------
  Chapter(id="def-square-man", head="Draw a square character", 
    contents=Seq(
      taskHead, Para("Draw a character with squares of different sizes."),
      LineBreak,
      OverlayImage("square-man.png",x = 20, y = -1, width = 5.5),
      hintHead,
      Code("""
def square(x: Int, y: Int, sideLength: Int) = {
  jumpTo(x, y)
  repeat(4) { forward(sideLength); right }
}
def head(x: Int, y: Int) = { setFillColor(pink); setPenColor(red); square(x, y, 200) }
def eye(x: Int, y: Int) = { setFillColor(white); setPenColor(black); square(x, y, 40) }
def pupil(x: Int, y: Int) = { setFillColor(black); setPenColor(black); square(x, y, 10) }
def nose(x: Int, y: Int) = { setFillColor(blue); setPenColor(noColor); square(x, y, 30) }
def mouth(x: Int, y: Int) = { setPenThickness (10); setFillColor(black); setPenColor(red); square(x, y, 40) }

clear; setAnimationDelay(20); invisible
head(0, 0)
eye(40, 100); pupil(60, 100)
???
       """.trim,size=14)
    )
  ), 
//------------------------------------------------------
  Chapter(id="plygon", head="Draw a polygon", 
    contents=Seq(
      taskHead, Itemize(
        "Try out the code below. Draw different kinds of polygons.",
        "Add a parameter {:sideLength:} and draw polygons of different sizes.",
        "How large does n have to be to make it look like a circle?"),
      hintHead,
      Code("""
def polygon(n:Int) = repeat(n){
  forward(100)
  left(360.0/n)
}

clear; setAnimationDelay(100)
polygon(7)
       """.trim,size=18),
      OverlayImage("polygon.png",x=20,y=3.5,width=8)
    )
  ), 
//------------------------------------------------------
  Chapter(id="plygons", head="Draw several polygons", 
    contents=Seq(
      taskHead, Itemize(
        "Try out the program below.",
        "Try to change the amount of sides and the angle.",
        "Fill the polygons with different colors."),
      OverlayImage("polygons-circle.png",x = 22, y = -0.5, width = 11),
      Code("""
def polygon(n: Int, sideLength: Int) = repeat(n){
  forward(sideLength)
  left(360.0/n)
}
def rotate(n: Int, heading: Int, sideLength: Int) = 
  repeat(360/heading){ polygon(n, sideLength); left(heading) }

clear; setAnimationDelay(5)
rotate(7, 10, 100)
       """.trim,size=16)
    )
  ), 
//------------------------------------------------------
  Chapter(id="show-value", head="Values and expressions", 
    template = MultiColumn(2),
    contents=Seq(
      taskHead, 
      Itemize("Write{:1 + 1:} and press the blue play button. Kojo will then create a green comment.", 
        "The comment shows the value of the expression {:1 + 1:} that is {:2:} and the type is {:Int:}, which means {:Integer:}.",
        "Create more expressions. What's the value and type?"),
      Code("""
5 * 5
10 + 2 * 5
"Hello" + "world"
5 / 2
5 / 2.0
5 % 2
      """.trim),
      ColumnBreak, Image("show-value.png", width=12),
      hintHead, Itemize("{:/:} between integers creates a division of integers and the decimals will be ignored. To make a division with decimals, at least one of the numbers must contain decimals.","With {:%:} you get the rest of a division of integers.")
    )
  ), 
//------------------------------------------------------
  Chapter(id="val", head="Name the values with {:val:}", 
    template=TextWithImage("val.png",width=12),
    contents=Seq(
      taskHead,
      Para("With {:val:} you can connect a name to a value. The name could then be used instead of the value. Try out the program below. What does the turtle write?"),
      Code("""
val x = 10
val y = 5
val cucumber = x + y
val banana = x * y

clear
forward; write(banana)
forward; write(cucumber)
forward; write(y)
forward; write(x)
      """.trim)
    )
  ), 
//------------------------------------------------------
  Chapter(id="random-circles", head="Random numbers", 
    contents=Seq(
      taskHead, Itemize(
        "Run the program below several times. What happens?",
        "What is the smallest and largest possible value of the radius {:r}?",
        "Change it so that {:r:} becomes a random number between 3 and 200.",
        "Draw 100 circles with random radiuses on random positions, as shown in the picture."),
      OverlayImage("random-circles.png",x=21,y= -5,width=8),
      Code("""
//värdet r blir ett random mellan 10 och 89:
val r = random(90) + 10   

clear; setAnimationDelay(10); invisible
write("Radie = " + r)
circle(r)
       """.trim,size=20)
    )
  ), 
//------------------------------------------------------
  Chapter(id="mix-colors", head="Blanda dina egna färger", 
    contents=Seq(
      Itemize(
        "Med {:Color:} kan du blanda egna färger, till exempel {:Color(0, 70, 0):}", 
        "De tre parametrarna anger mängden {/rött/}, {/grönt/} och {/blått/}",
        "Du kan också lägga till en fjärde parameter som anger {/genomskinligheten/}",
        "Alla parametrar ska vara mellan 0 och 255" 
      ),
      taskHead, Para(
        "Prova programmet nedan. Ändra genomskinligheten."
      ),
      OverlayImage("color-circles.png",x=23,y= -2,width=7),
      Code("""
clear; setAnimationDelay(100)      

val olivgreen = Color(0,70,0)
val pistageglass = Color(0,255,0,100)

setFillColor(olivgreen); circle(100)
setFillColor(pistageglass); forward(100); circle(100)
       """.trim,size=16)
    )
  ), 
//------------------------------------------------------
  Chapter(id="color-picker", head="Prova färgväljaren", template=TextWithImage("color-chooser-rgb-sv.png",width=14),
    contents=Seq(
      taskHead, Itemize(
        """Högerklicka i editor-fönstret och klicka på {:Välj färg...:}""", 
        "Om du väljer fliken {*RGB*} i färgväljaren kan du blanda nya RGB-färger.", 
        "Tryck OK och titta i Utdatafönstret. Där syns de tre RGB-värdena för rött, grönt och blått.",
        "Du kan använda dessa värden i ditt program för att rita med din nya färg med {:färg(Color(218, 153, 67)):}."
      )
    )
  ), 
//------------------------------------------------------
  Chapter(id="circle-of-circles", head="Rita slumpcirklar", 
    template=MultiColumn(2),
    contents=Seq(
      Code("""
def slump = random(256)
def slumpsetPenColor = Color(slump,10,slump,100) 

clear; setAnimationDelay(5)
setBackground2(black,white)
setPenThickness (6)

repeat(100) {
    setPenColor(slumpsetPenColor)
    circle(100)
    hop(20)
    right(35)
}
       """.trim,size=16), taskHead, Para("Prova olika slumpfärger och bakgrunder."),
       ColumnBreak, CenterImage("circle-of-circles.png",width=12)
    )
  ), 
//------------------------------------------------------
  Chapter(id="flower", head="Rita en blomma", 
    contents=Seq(
      taskHead, 
      Para("Programmet nedan ritar 100 slumpfärgade cirklar på slumpmässig plats med slumpmässig radie. " +
           "Prova att ändra de olika slumptalens gränser och försök förklara vad som händer."),
      OverlayImage("random-color-circles.png",x=22,y= -4,width=8.5),
      Code("""
clear(); setAnimationDelay(5)
setPenThickness (2)
repeat(100){
  setPenColor(Color(random(256),0,random(256)))
  setFillColor(Color(random(256),0,random(256),random(100)+50))
  left(random(360))
  circle(random(30)*4+10)
}
       """.trim,size=16)
    )
  ), 
//------------------------------------------------------
  Chapter(id="var", head="Skapa en variabel med {:var:}", 
    contents=Seq(
      Para("Med {:var:} kan koppla ett namn till ett värde.", 
        "Du får då en variabel, som kan tilldelas ett nytt värde så här:"),
      Code("""
var gurka = 1
gurka = 1 + 1   //först räknas 1 + 1 ut, sedan blir gurka 2        
        """),
     taskHead, 
       Para("Prova programmet nedan. Vad skriver paddan?"),
      Code("""
var i = 0

clear
repeat(10){
  i = i + 1
  forward; write(i)
}
       """.trim,size=16),
      hintHead, Itemize("I satsen {:i = i + 1:} tilldelas {:i:} ett nytt värde som blir det {/gamla/} värdet av {:i:} plus {:1:}")
    )
  ), 
//------------------------------------------------------
  Chapter(id="flowers", head="Rita många blommor", 
    contents=Seq(
      taskHead,       
      Itemize(
        "Gör en funktion som heter {:blomma:}, som ritar en krona och en stjälk från kronans mitt med ett grönt blad.",
        "Rita 5 blommor bredvid varandra."),
      OverlayImage("flowers.png",x=15, y= -7, width=16),    
      hintHead, 
      Para(
        "Du kan rita blad med {:båge(radie, vinkel):}. ",
        "Låt funktionen {:blomma:} ha två parametrar x och y och använd {:hoppaTill(x,y):}",
        "Du kan loopa 5 gånger och räkna ut platsen så här:"
      ), 
      Code("""
var i = 0          
repeat(5){
  blomma(600*i,0)
  i = i + 1        
}
""".trim,size=18) 
    )
  ), 
//------------------------------------------------------
  Chapter(id="costume", head="Byt kostym på paddan", 
    contents=Seq(
      taskHead,       
      Para("Ladda ner mediafiler från Kojos hemsida:"),
      HRef("http://www.kogics.net/kojo-download#media", "www.kogics.net/kojo-download\\#media"), 
      Itemize("Packa upp filen {:scratch-media.zip:} och leta rätt på krabbbilden {:crab1-b.png:} i mappen {:Media/Costumes/Animals:}", 
      "Lägg filen {:crab1-b.png:} i samma mapp som du har ditt program.",
      "Prova att byta kostym på paddan till en krabba så här:"),
      OverlayImage("crab1-b.png",x=12, y= -2.5, width = 4),
      Code("""
clear
setCostume ("crab1-b.png")  
setAnimationDelay(2000)
forward(1000) 
      """.trim,size=20),
      hintHead,
      Itemize("Du kan också använda dina egna bilder av typen {:.png:} eller {:.jpg:}",
      """Om du vill lägga bilden i en annan mapp så kan du skriva filens sökväg, till exempel {:kostym("~/Kojo/Media/Costumes/Animals/crab1-b.png"):} där {:~:} betyder din hemkatalog.""")      
    )
  ), 
//------------------------------------------------------
 Chapter(id="new", head="Gör många paddor med {:new:}", 
   contents=Seq(
     Para("Du kan skapa många nya paddor med {:new:} så här:"),
     Code("""
clear
val p1 = new Padda(100,100)  //nya paddan p1 börjar på plats (100, 100)
val p2 = new Padda(100, 50)  //nya paddan p2 börjar på plats (100, 50)
p1.forward(100)
p2.forward(-100)  //paddan p2 backar
""".trim, size=18),
      OverlayImage("new.png", x = 22, y = -2, width = 5),
      taskHead, Itemize(
        "Skapa tre paddor som står ovanför varandra.","Gör så att alla huvud är vända åt vänster."
      ),
      hintHead, Itemize(
        "{:p1:} och {:p2:} är paddornas {/namn/}. Du kan välja vilka namn du vill.", 
        "Med namnet {:p1:} och en punkt kan du ge instruktioner till paddan p1 så här: {:p1.vänster:}",
        "Med {:osynlig:} blir den vanliga paddan osynlig."
      )
   )
 ), 
//------------------------------------------------------
 Chapter(id="race", head="Gör en kapplöpning", 
   template = TextWithImage("race.png", width = 12),
   contents=Seq(
     Para("Med hjälp av slumptal kan paddorna genomföra en kapplöpning mot varandra."),
      taskHead, Itemize(
        "Låt tre paddor springa ikapp.",
        "Om alla får springa fram 10 gånger, vilken padda kommer då först?"
      ),
      hintHead, Itemize(
        "Med {:p1.fram(slumptal(100) + 1):} går paddan p1 fram 1 till 100 steg."
      )
   )
 ), 
//------------------------------------------------------
  Chapter(id="if", head="Alternativ med {:if:}", 
    contents=Seq(
      Para("Med en {:if:}-sats kan datorn välja mellan två olika alternativ."),
      Code("""
clear; invisible
if (true) write("sant") else write("falskt")
     """.trim, size = 20),
      taskHead, Itemize(
        "Ändra {:true:} till {:false:} och kolla vad paddan skriver.",
        "Ändra villkoret till {:2 > 1:} och kolla vad paddan skriver.",
        "Ändra villkoret till {:2 < 1:} och kolla vad paddan skriver.",
        "Förklara hur en {:if:}-sats fungerar."
      ),
      hintHead, Itemize(
        "Om villkoret efter {:if:} är {:true:} väljs det som står efter villkoret.",
        "Om villkoret efter {:if:} är {:false:} väljs det som står efter {:else:}."
      )
    )
  ), 
//------------------------------------------------------
  Chapter(id="if-input", head="Reagera på vad användaren gör", 
    contents=Seq(
      Code("""
clearOutput; setOutputTextFontSize(35)
val lösenord = "gurka"
val fråga     = "Vad är lösenordet?"
val rätt      = "Kassaskåpet är öppet!"
val fel       = "Du får inte komma in!"
val svar = readln(fråga)  //vänta på svar från användaren
val meddelande = if (svar == lösenord) rätt else fel
println(meddelande)
     """.trim, size = 20),
      taskHead, Itemize(
        "Prova programmet och förklara vad som händer.",
        "Ändra lösenord, fråga och vad som skrivs ut när det blev rätt ocv fel.",
        "Fråga även efter användarnamn och lägg till användarnamnet i utskriften."
      )
    )
  ), 
//------------------------------------------------------
  Chapter(id="while", head="Gör en {:while:}-loop", 
    contents=Seq(
      Para("Med en {:while:}-loop kan datorn upprepa satser så länge ett villkor är sant."),
      Code("""
clear; invisible; setAnimationDelay(250); clearOutput
var x = 200
while (x > 0) {  //kolla villkoret före varje runda 
  forward(x); right
  write(x) 
  x = x - 12
}
println("x är nu: " + x)
     """.trim, size = 22),
      taskHead, Itemize(
        "Vad skrivs ut i utdatafönstret? Varför?",
        "Spåra programmet med den orange-färgade play-knappen och undersök varje steg.",
        "Ändra minskningen av {:x:} från {:12:} till {:20:}. Förklara vad som händer."
      )
    )
  ),
//------------------------------------------------------
  Chapter(id="guess-the-number", head="Gissa talet", 
    contents=Seq(
      Code("""
val homelis = random(100)+1
var svar = readln("Gissa ett tal mellan 1 och 100! ")
var fortsätt = true

while (fortsätt) {
    if (svar.toInt < homelis)
      svar = readln(svar + " är för LITET, gissa igen!")
    else if (svar.toInt > homelis)
      svar = readln(svar + " är för STORT, gissa igen!")
    else if (svar.toInt == homelis)
      fortsätt = false
}
println(homelis + " är RÄTT svar!")
      """.trim,size=16),
      taskHead,
      Para("Inför en variabel {:var antalFörsök = 0:} och se till att utskriften på slutet blir:", 
      "{:Rätt svar! Du klarade det på 5 gissningar!:}")
    )      
  ), 
//------------------------------------------------------
  Chapter(id="multiply", head="Träna multiplikation", 
    contents=Seq(
      Code("""
var antalRätt = 0
val startTid = System.currentTimeMillis / 1000
repeat(12) {
  val tal1 = random(12)+1
  val tal2 = random(12)+1
  val svar = readln("Vad är " + tal1 + "*" + tal2 + "?")
  if (svar == (tal1 * tal2).toString) {
    println("Rätt!")
    antalRätt = antalRätt + 1
  }
  else println("Fel. Rätt svar är " + (tal1 * tal2))
}
val stoppTid = System.currentTimeMillis / 1000
val sek = stoppTid - startTid
println("Du fick " + antalRätt + " rätt på " + sek + " sekunder.")
      """.trim,size=16),  
      taskHead,
      Para("Ändra så att man bara tränar 8:ans och 9:ans tabell.")      
    )
  ), 
//------------------------------------------------------
  Chapter(id="vector", head="Spara djur i en vektor", 
    contents=Seq(
      Code("""
var djur = Vector("älg", "ko", "kanin", "kvalster")  //variablen djur blir en vektor med 4 djur
println("Första djuret i vektorn är: " + djur(0))     //platserna i vektorer räknas från 0
println("Andra djuret i vektorn är:  " + djur(1))
println("Det finns så här många djur: " + djur.size)
println("Sista djuret i vektorn är:  " + djur(djur.size-1))

val s = random(djur.size)   //dra ett slumpal mellan 0 och antalet djur minus 1
println("Ett slumpmässigt djur: " + djur(s))

djur = djur :+ "kamel"    //lägg till ett djur sist i vektorn
djur = "dromedar" +: djur //lägg till ett djur först i vektorn
djur = djur.updated(2, "slamkrypare")  //Ändra tredje djuret (plats 2 i vektorn)
println("Alla djur i vektorn baklänges:")
djur.foreach{ x => println(x.reverse) } //för alla x i vektorn: write ut x baklänges
      """.trim,size=14),   
      taskHead,
      Itemize("Vad skriver programmet i utdatafönstret? Förklara vad som händer.","Lägg till fler djur i vektorn.")
    )
  ), 
//------------------------------------------------------
  Chapter(id="translate", head="Träna glosor", 
    contents=Seq(
      Code("""
val svenska = Vector("dator", "sköldpadda", "circle")
val engelska = Vector("computer", "turtle", "circle")
var antalRätt = 0
repeat(5) {
  val s = random(3)
  val glosa = svenska(s)
  val svar = readln("Vad heter " + glosa + " på engelska?")
  if (svar == engelska(s)) {
    println("Rätt svar!")
    antalRätt = antalRätt + 1
  } else {
    println("Fel svar. Rätt svar är: " + engelska(s))
  }
}
println("Du fick" + antalRätt + " rätt.")
      """.trim,size=14),   
      taskHead,
      Itemize("Lägg till fler glosor.",
      "Träna på glosor från engelska till svenska.", 
      """Låt användaren välja hur många frågor innan avslut. Tips: {:val antal = indata("Ange antal: ").toInt:}""")
    )
  ), 
//------------------------------------------------------
  Chapter(id="capitols", head="Huvudstadsspelet", 
    contents=Seq(
      Code("""
def huvudstadsspelet = {
  println("Välkommen till Huvudstadsspelet!")
  val stad = Map("Sverige" ->"Stockholm", "Danmark" -> "Köpenhamn", "Skåne" -> "Malmö")
  var länderKvar = stad.keySet //keySet ger en mängd av alla nycklar i en Map 
  def slumpLand = scala.util.Random.shuffle(länderKvar.toVector).head
  while(!länderKvar.isEmpty) {
    val land = slumpLand
    val svar = indata("Vad heter huvudstaden i " + land + "?")
    utdata(s"Du skrev: $svar")
    if (svar == stad(land)) {
      utdata("Rätt svar! Du har " + länderKvar.size + " länder kvar!")
      länderKvar = länderKvar - land  //ta bort land ur mängden länderKvar
    } else utdata(s"Fel svar. Huvudstaden i $land börjar på ${stad(land).take(2)}...")
  }
  utdata("TACK FÖR ATT DU KÄMPADE! (Tryck ESC)")
}

toggleFullScreenOutput;  
setOutputBackground(black); setOutputTextColor(green); setOutputTextFontSize(30)
upprepa(100)(utdata("")) //scrolla utdafönstret med 100 blanka rader
huvudstadsspelet

// *** UPPDRAG: (1) Lägg till fler par: land -> stad  (2) Mät tid och räkna poäng. 
      """.trim,size=13)
    )
  ), 
//------------------------------------------------------
  Chapter(id="timer", head="Gör en timer med {:object:}", 
    contents=Seq(
      Code("""
object timer {
  def nu = System.currentTimeMillis  //ger nutid i millisekunder
  var tid = nu
  def nollställ = { tid = nu }
  def mät = nu - tid
  def slumpvänta(min: Int, max: Int) =  //vänta mellan min och max sekunder
    Thread.sleep((random(max-min)+min)*1000)  //Thread.sleep(1000) väntar 1 sekund
}

println("Klicka i printlnfönstret och vänta...")
timer.slumpvänta(3,6)   //vänta mellan 3 och 6 sekunder
timer.nollställ
readln("Tryck Enter så snabbt du kan.")
println("Reaktionstid: " + (timer.mät/1000.0) + " sekunder")
      """.trim,size=14),   
      Para("Med {:object:} kan du samla saker som hör ihop i ett objekt.",
        "Du kommer åt en sak inne i ett objekt med en punkt: {:timer.nollställ:}"),
      taskHead,
      Itemize("Prova programmet och mät din reaktionstid. Hur snabb är du?",
             "Använd {:timer:} i uppdraget {/Gissa talet/} och lägg till utskriften: {:Rätt svar! Du klarade det på 5 gissningar och 32 sekunder!:}")
    )
  ), 
//------------------------------------------------------
  Chapter(id="traffic-lights", head="Simulera ett trafikljus", 
    contents=Seq(
      OverlayImage("traffic-lights.png",x=22, y= -6, width=3),
      Code("""
def släckAlla = draw(penColor(gray) * fillColor(black) -> PicShape.rect(130,40))
def ljus(c: Color, h: Int) = penColor(noColor) * fillColor(c) * trans(20,h) -> PicShape.circle(15)
def tändRött = draw(ljus(red, 100))
def tändGult = draw(ljus(yellow, 65))
def tändGrönt = draw(ljus(green, 30))
def vänta(sekunder: Int) = Thread.sleep(sekunder*1000)

clear; invisible  
while (true) { //en oändlig loop
  släckAlla
  tändRött;  vänta(3)
  tändGult;  vänta(1) 
  släckAlla
  tändGrönt; vänta(3)
  tändGult;  vänta(1)
}
      """.trim,size=14),       taskHead,
      Itemize("Hur växlar trafikljuset? Försök förklara vad som händer.",
      "Ändra så att trafikljuset är grönt dubbelt så länge.")   
    )
  ),
//------------------------------------------------------
  Chapter(id="key-control", head="Styr paddan med tangentbordet", 
    template=MultiColumn(2),
    contents=Seq(
      Code("""
clear; setAnimationDelay(0)
activateCanvas()

animate { forward(1) }

onKeyPress { k =>
  k match {
    case Kc.VK_LEFT =>   left(5)
    case Kc.VK_RIGHT =>  right(5)
    case Kc.VK_SPACE =>  forward(5)
    case _ => 
      println("Annan tangent: " + k)
  }
}
      """.trim, size = 18),
      ColumnBreak,
      taskHead,
      Itemize(
        "Skriv {:Kc.:} och tryck {:Ctrl+Alt+Mellanslag:} och kolla vad de olika tangenterna heter.", 
        "Gör {:pennaUpp:} om man trycker pil upp",
        "Gör {:pennaNer:} om man trycker pil ner",
        "Gör {:färg(blå):} om man trycker B",
        "Gör {:färg(röd):} om man trycker R",
        "Öka eller minska hastigheten om man trycker + eller -"
      )   
    )
  ),
//------------------------------------------------------
  Chapter(id="mouse-control", head="Styr paddan med musen", 
    template=MultiColumn(2),
    contents=Seq(
      Code("""
clear; setAnimationDelay(100)
activateCanvas()

var rita = true

onKeyPress { k =>
  k match {
    case Kc.VK_DOWN => 
      penDown()
      rita = true
    case Kc.VK_UP => 
      penUp()
      rita = false
    case _ => 
      println("Annan tangent: " + k)
  }
}

onMouseClick { (x, y) =>
  if (rita) moveTo(x, y) else jumpTo(x, y)
}
      """.trim, size = 16),
      ColumnBreak,
      taskHead,
      Itemize(
        "Gör {:fyll(svart):} om man trycker på F",
        "Inför en variabel {:var fyllNästa = true:} och i fallet att man trycker på {:Kc.VK_F:} gör:"
      ), Code("""
      if (setFillColorNästa) {
        setFillColor(black)
        setFillColorNästa=false
      } else {
        setFillColor(noColor)
        setFillColorNästa=true
      }
      """)   
    )
  ),
//------------------------------------------------------
  Chapter(id="object-bankaccount", head="Gör ett ditt eget bankkonto", 
    template=MultiColumn(2),
    contents=Seq(
      Code("""
object mittKonto {
  val nummer = 123456
  var saldo = 0.0
  def in(belopp: Double) = {
    saldo = saldo + belopp 
  }
  def ut(belopp: Double) = { 
    saldo = saldo - belopp 
  }
  def visaSaldo() = {
    println("Konto nummer: " + nummer) 
    println("       saldo: " + saldo)
  }
}

mittKonto.visaSaldo()
mittKonto.in(100)
mittKonto.visaSaldo()
mittKonto.ut(10)
mittKonto.visaSaldo()
      """.trim, size = 16),
      ColumnBreak,
      taskHead,
      Itemize(
        "Vad är saldot efter att programmet kört klart? Förklara vad som händer.",
        "Gör så att det inte går att ta ut mer pengar än som finns på kontot.",
        "Lägg till {:val maxBelopp = 5000:} och kolla så att man inte kan ta ut mer än {:maxBelopp:} åt gången."
      )
    )
  ),
//------------------------------------------------------
  Chapter(id="class-bankaccount", head="Gör många objekt från en {:class:}", 
    template=MultiColumn(2),
    contents=Seq(Para("Om man vill skapa många konto behövs en klass. Med {:new:} skapas nya objekt. Varje objekt får eget nummer och saldo."),
      Code("""
class Konto(nummer: Heltal) {
  private var saldo = 0.0 //private betyder "hemlig"  
  def in(belopp: Decimaltal) = {
    saldo = saldo + belopp
  }
  def ut(belopp: Decimaltal) = {
    saldo = saldo - belopp
  }
  def visaSaldo() = 
    utdata(s"Konto $nummer: $saldo")
}

val konto1 = new Konto(12345) //new skapar objekt 
val konto2 = new Konto(67890) //ännu ett objekt

konto1.in(99)
konto2.in(88)
konto1.ut(57)
konto1.visaSaldo
konto2.visaSaldo
      """.trim, size = 13),
      ColumnBreak,
      taskHead,
      Itemize(
        "Vad är saldot på de olika kontona när programmet kört klart? Förklara vad som händer.",
        "Skapa ännu fler bankkonto-objekt och sätt in och ta ut lite pengar på dessa.",
        "Lägg till en klassparameter {:namn: String:} som ska innehålla namnet på kontoägaren när objekt skapas.",
        "Gör så att även {:namn:} skrivs ut när {:visaSaldo:} anropas",
        "Vad händer om du gör: {:konto1.saldo = 10000000 }")
    )
  ),
//------------------------------------------------------
  Chapter(id="eliza", head="Prata med datorn", 
    contents=Seq(
      Code("""
setOutputBackground(black); setOutputTextFontSize(30); setOutputTextColor(green)
println("Skriv intressanta svar även om frågorna är konstiga. Avsluta med 'hej då'")
def slumpa(xs: Vector[String]) = scala.util.Random.shuffle(xs).head
val ledtexter = Vector("Vad betyder", "Gillar du", "Varför behövs", "Berätta mer om")
var svar = "?"
val öppning = "Vad vill du prata om?"
var ord = Vector("navelludd", "ketchupglass", "jultomten", "örngott") 
while (svar != "hej då") {
  val t = if (svar == "?") öppning 
    else if (svar == "nej") "Nähä." 
    else if(svar == "ja") "Jaha." 
    else if (svar.length < 4) "Jasså..." 
    else slumpa(ledtexter) + " " + slumpa(ord) + "?"
  svar = readln(t).toLowerCase
  ord = ord ++ svar.split(" ").toList.filter(_.length > 3) 
} 
println("Tack för pratstunden! Jag kan nu dessa ord:" + ord)

//Uppdrag:
// (1) Prova programmet och försök att förklara vad som händer.
// (2) När avslutas while-loopen?
// (3) Lägg till fler strängar i vektorerna ledtexter och ord
// (4) Lägg till fler bra svar på några korta ord utöver "nej" och "ja"
      """.trim, size = 13)
    )
  ),
//------------------------------------------------------
  Chapter(id="modify-pong", head="Modda pong-spelet", 
    template=TextWithImage("pong.png"),
    contents=Seq(
      taskHead,
      Itemize(
      "Välj menyn Exempel > Animeringar och spel > Pong och prova spelet.",
      "Man styr med pil upp och pil ner, samt A och Z.",
      "Tryck ESC för att avbryta spelet och undersök koden.",
      "Ändra i koden så att bollen blir större.",
      "Gör spelplanen till en tennisplan, med grönt underlag, vita linjer och en gul boll.")   
    )
  )  
    
)

//********************
println("********************* input:"+chapters)
latexgen.make(chapters, "kojobook/tex/body-en.tex")
